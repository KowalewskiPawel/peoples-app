/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CreateProfileDataStruct = {
  to: string;
  handle: string;
  imageURI: string;
  followModule: string;
  followModuleData: BytesLike;
  followNFTURI: string;
};

export type CreateProfileDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string
] & {
  to: string;
  handle: string;
  imageURI: string;
  followModule: string;
  followModuleData: string;
  followNFTURI: string;
};

export type PostDataStruct = {
  profileId: BigNumberish;
  contentURI: string;
  collectModule: string;
  collectModuleData: BytesLike;
  referenceModule: string;
  referenceModuleData: BytesLike;
};

export type PostDataStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string,
  string
] & {
  profileId: BigNumber;
  contentURI: string;
  collectModule: string;
  collectModuleData: string;
  referenceModule: string;
  referenceModuleData: string;
};

export interface PeoplesChannelInterface extends utils.Interface {
  functions: {
    "confirmChannelProposal(uint256)": FunctionFragment;
    "createChannel((address,string,string,address,bytes,string))": FunctionFragment;
    "createChannelProposal((address,string,string,address,bytes,string))": FunctionFragment;
    "createPost((uint256,string,address,bytes,address,bytes))": FunctionFragment;
    "getHandlesByOwner(address)": FunctionFragment;
    "getVoteAmount(string)": FunctionFragment;
    "handleVotes(string,uint256)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "isCreator(address)": FunctionFragment;
    "ownerToHandles(address,uint256)": FunctionFragment;
    "postsByChannel(string,uint256)": FunctionFragment;
    "setFollowModule(uint256,address,bytes)": FunctionFragment;
    "vote(string)": FunctionFragment;
    "voteAmount(string)": FunctionFragment;
    "voteChannel(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "confirmChannelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannel",
    values: [CreateProfileDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannelProposal",
    values: [CreateProfileDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [PostDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandlesByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isAllowed", values: [string]): string;
  encodeFunctionData(functionFragment: "isCreator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerToHandles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postsByChannel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollowModule",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [string]): string;
  encodeFunctionData(functionFragment: "voteAmount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voteChannel",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmChannelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHandlesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToHandles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postsByChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFollowModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteChannel",
    data: BytesLike
  ): Result;

  events: {
    "ChannelProposals(address,string)": EventFragment;
    "newChannel(address,string)": EventFragment;
    "newChannelPost(address,string,string,address,bytes,address,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChannelProposals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newChannel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newChannelPost"): EventFragment;
}

export type ChannelProposalsEvent = TypedEvent<
  [string, string],
  { creator: string; channelName: string }
>;

export type ChannelProposalsEventFilter =
  TypedEventFilter<ChannelProposalsEvent>;

export type newChannelEvent = TypedEvent<
  [string, string],
  { creator: string; channelName: string }
>;

export type newChannelEventFilter = TypedEventFilter<newChannelEvent>;

export type newChannelPostEvent = TypedEvent<
  [string, string, string, string, string, string, string, BigNumber],
  {
    creator: string;
    channelName: string;
    contenURI: string;
    collectModule: string;
    collectModuleReturnData: string;
    referenceModule: string;
    referenceModuleReturnData: string;
    timestamp: BigNumber;
  }
>;

export type newChannelPostEventFilter = TypedEventFilter<newChannelPostEvent>;

export interface PeoplesChannel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PeoplesChannelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmChannelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createChannel(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createChannelProposal(
      vars: CreateProfileDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPost(
      vars: PostDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHandlesByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVoteAmount(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    handleVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isCreator(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    ownerToHandles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postsByChannel(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setFollowModule(
      profileId: BigNumberish,
      followModule: string,
      followModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voteChannel(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  confirmChannelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createChannel(
    vars: CreateProfileDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createChannelProposal(
    vars: CreateProfileDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPost(
    vars: PostDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHandlesByOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVoteAmount(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

  handleVotes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isCreator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  ownerToHandles(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  postsByChannel(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setFollowModule(
    profileId: BigNumberish,
    followModule: string,
    followModuleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    handle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  voteChannel(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    confirmChannelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createChannel(
      vars: CreateProfileDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createChannelProposal(
      vars: CreateProfileDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createPost(vars: PostDataStruct, overrides?: CallOverrides): Promise<void>;

    getHandlesByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVoteAmount(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isCreator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    ownerToHandles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    postsByChannel(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setFollowModule(
      profileId: BigNumberish,
      followModule: string,
      followModuleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(handle: string, overrides?: CallOverrides): Promise<void>;

    voteAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voteChannel(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ChannelProposals(address,string)"(
      creator?: string | null,
      channelName?: null
    ): ChannelProposalsEventFilter;
    ChannelProposals(
      creator?: string | null,
      channelName?: null
    ): ChannelProposalsEventFilter;

    "newChannel(address,string)"(
      creator?: string | null,
      channelName?: string | null
    ): newChannelEventFilter;
    newChannel(
      creator?: string | null,
      channelName?: string | null
    ): newChannelEventFilter;

    "newChannelPost(address,string,string,address,bytes,address,bytes,uint256)"(
      creator?: string | null,
      channelName?: string | null,
      contenURI?: null,
      collectModule?: null,
      collectModuleReturnData?: null,
      referenceModule?: null,
      referenceModuleReturnData?: null,
      timestamp?: BigNumberish | null
    ): newChannelPostEventFilter;
    newChannelPost(
      creator?: string | null,
      channelName?: string | null,
      contenURI?: null,
      collectModule?: null,
      collectModuleReturnData?: null,
      referenceModule?: null,
      referenceModuleReturnData?: null,
      timestamp?: BigNumberish | null
    ): newChannelPostEventFilter;
  };

  estimateGas: {
    confirmChannelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createChannel(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createChannelProposal(
      vars: CreateProfileDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPost(
      vars: PostDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHandlesByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteAmount(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCreator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerToHandles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postsByChannel(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFollowModule(
      profileId: BigNumberish,
      followModule: string,
      followModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voteChannel(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmChannelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createChannel(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createChannelProposal(
      vars: CreateProfileDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPost(
      vars: PostDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHandlesByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteAmount(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerToHandles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postsByChannel(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFollowModule(
      profileId: BigNumberish,
      followModule: string,
      followModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteChannel(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
